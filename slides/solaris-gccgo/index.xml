<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Solaris-gccgos on Recent Presentation Slides</title>
    <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/</link>
    <description>Recent content in Solaris-gccgos on Recent Presentation Slides</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 22 Mar 2016 10:51:14 +0900</lastBuildDate>
    
	<atom:link href="https://tanstaafl.0pt.jp/slides/solaris-gccgo/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>slide20</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide20/</link>
      <pubDate>Tue, 22 Mar 2016 10:51:14 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide20/</guid>
      <description>終わりに マイナーなアーキテクチャでもgccgoなら動かせる（？） 既存のツールをgo getでインストールする場合は依存関係の解決が大変 公式ライ</description>
    </item>
    
    <item>
      <title>slide19</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide19/</link>
      <pubDate>Tue, 22 Mar 2016 10:02:55 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide19/</guid>
      <description>動作確認したツール類 serf gnatsd fluentd-forwarder 動かなかったもの consul peco go1.5以降に依存しているものはうごかないみたい 特定のアーキテクチャがハードコーディングされ</description>
    </item>
    
    <item>
      <title>slide18</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide18/</link>
      <pubDate>Tue, 22 Mar 2016 10:02:54 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide18/</guid>
      <description>コンパイル $ go build --compiler gccgo \ --gccgoflags &amp;quot;-v -static-libgo -static-libgcc -Wl,-dy -lnsl -lsocket -lrt&amp;quot; 重要 参照元のオプションに-static-libgccを追加しないとSolaris環境では動作しませんで</description>
    </item>
    
    <item>
      <title>slide17</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide17/</link>
      <pubDate>Tue, 22 Mar 2016 09:56:33 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide17/</guid>
      <description>作成したクロスコンパイラにパスを通す $ cd $PREFIX/bin $ ln -s /sparc-sun-solaris2.10-gccgo gccgo $ export PATH=$PREFIX/bin:$PATH</description>
    </item>
    
    <item>
      <title>slide16</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide16/</link>
      <pubDate>Tue, 22 Mar 2016 09:56:31 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide16/</guid>
      <description>作り方05 対象アーキテクチャ向けにbinutilsとgccをビルドする $ tar -zxf binutils-2.25.tar.gz $ mkdir build-binutils $ cd build-binutils $ sudo ../binutils-2.25/configure -target=$TARGET --prefix=$PREFIX -with-sysroot=$SYSROOT -v $ sudo make -j4 $ sudo make install $ untar gcc-5.1.0.tar.gz $ mkdir gcc-build $ cd gcc-build $</description>
    </item>
    
    <item>
      <title>slide15</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide15/</link>
      <pubDate>Tue, 22 Mar 2016 09:23:52 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide15/</guid>
      <description>作り方04 SYSROOTに対象サーバのライブラリとヘッダをごっそりコピーする（rsync） $ sudo cd $SYSROOT $ sudo rsync -a root@solaris_sparc_machine:/lib/ $SYSROOT/lib/ $ sudo rsync -a root@solaris_sparc_machine:/usr/lib $SYSROOT/usr/ $ sudo rsync -a root@solaris_sparc_machine:/usr/include $SYSROOT/usr/ $ sudo rsync</description>
    </item>
    
    <item>
      <title>slide14</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide14/</link>
      <pubDate>Tue, 22 Mar 2016 09:23:50 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide14/</guid>
      <description>作り方03 3つ環境変数を決めます PREFIX=${クロスコンパイラがインストールされるルートパス} SYSROOT=${コンパイルするときにリ</description>
    </item>
    
    <item>
      <title>slide13</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide13/</link>
      <pubDate>Tue, 22 Mar 2016 09:23:48 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide13/</guid>
      <description>作り方02 クロスコンパイル用の環境を用意します（Fedora release 20) gccをインストールします gcコンパイラ(v1.4)をインストールします（重</description>
    </item>
    
    <item>
      <title>slide12</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide12/</link>
      <pubDate>Tue, 22 Mar 2016 09:23:46 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide12/</guid>
      <description>作り方01 http://ggolang.blogspot.jp/2015/05/gccgo-gcc510-cross-compile-for-sparc.html このサイトを全部コピ参考にしました</description>
    </item>
    
    <item>
      <title>slide11</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide11/</link>
      <pubDate>Tue, 22 Mar 2016 09:20:25 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide11/</guid>
      <description>gccgoを使う gccgo Go言語のもう一つのコンパイラ gccをバックエンドに使っている gccのサポートするアーキテクチャが使える gccのクロスコン</description>
    </item>
    
    <item>
      <title>slide10</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide10/</link>
      <pubDate>Tue, 22 Mar 2016 08:03:43 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide10/</guid>
      <description>Goの対応OS/CPUリスト https://golang.org/doc/install/source#environment ... あっ、Sparcが無い</description>
    </item>
    
    <item>
      <title>slide09</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide09/</link>
      <pubDate>Tue, 22 Mar 2016 07:31:15 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide09/</guid>
      <description>あれ、Go・・・いいんじゃね？</description>
    </item>
    
    <item>
      <title>slide08</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide08/</link>
      <pubDate>Tue, 22 Mar 2016 07:29:50 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide08/</guid>
      <description>新たな開発言語の要件 ライブラリやランタイムの導入で悩まない 起動が早い マイナーなアーキテクチャでも動作する</description>
    </item>
    
    <item>
      <title>slide07</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide07/</link>
      <pubDate>Tue, 22 Mar 2016 07:27:31 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide07/</guid>
      <description>新しい開発言語が欲しい！</description>
    </item>
    
    <item>
      <title>slide06</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide06/</link>
      <pubDate>Tue, 22 Mar 2016 07:25:51 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide06/</guid>
      <description>うちのサーバの現況 大量のバッチプログラムが動いている ネットワーク構成上他のサーバへは移植できない 使用できる言語はJava/Perlのみ =&amp;gt; つら</description>
    </item>
    
    <item>
      <title>slide05</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide05/</link>
      <pubDate>Tue, 22 Mar 2016 07:24:47 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide05/</guid>
      <description>A. 歴史的経緯です！</description>
    </item>
    
    <item>
      <title>slide04</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide04/</link>
      <pubDate>Tue, 22 Mar 2016 07:24:22 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide04/</guid>
      <description>Q. なぜSparc/Solarisなのか？</description>
    </item>
    
    <item>
      <title>slide03</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide03/</link>
      <pubDate>Tue, 22 Mar 2016 07:21:23 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide03/</guid>
      <description>GOARCH=sparc64 SPARC（スパーク、Scalable Processor Architecture）は、 サン・マイクロシステムズが開発・製造したRISCベースのマイクロプロ</description>
    </item>
    
    <item>
      <title>slide02</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide02/</link>
      <pubDate>Tue, 22 Mar 2016 07:16:59 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide02/</guid>
      <description>GOOS=solaris Solaris（ソラリス）はサン・マイクロシステムズ（サン）によって開発され、 UNIXとして認証を受けたオペレーティングシステム (OS) である。</description>
    </item>
    
    <item>
      <title>slide01</title>
      <link>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide01/</link>
      <pubDate>Tue, 22 Mar 2016 07:15:06 +0900</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/slides/solaris-gccgo/slide01/</guid>
      <description>Sparc Solaris向けにGoのクロスコンパイル環境を作った話 Minori Tokuda(@snowcrush)</description>
    </item>
    
  </channel>
</rss>