<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Twitter on フリーランチなど無い - There ain&#39;t no such thing as a free lunch</title>
    <link>https://tanstaafl.0pt.jp/tags/twitter/</link>
    <description>Recent content in Twitter on フリーランチなど無い - There ain&#39;t no such thing as a free lunch</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 22 Nov 2010 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://tanstaafl.0pt.jp/tags/twitter/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>コメントシステムにNode.js&#43;Backtweetsを採用</title>
      <link>https://tanstaafl.0pt.jp/posts/2010/11/22/a0f229152618/</link>
      <pubDate>Mon, 22 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/posts/2010/11/22/a0f229152618/</guid>
      <description>&lt;p&gt;最近いろいろと試行錯誤を繰り返しているTwitterでのコメントシステムだが、結局Topsyは取りやめた。コメントの一部がうまく反映されないことがあるからだ。&lt;/p&gt;

&lt;p&gt;代わりに採用したのがbacktweetsだ。Topsyなどと同様に自分のサイトにリンクしているコンテンツをピックアップしてくれるBacktypeというサービスがある。Disqusにも採用されている便利検索サービスなのだが、そのBacktypeのAPIをラップしてtwitterからのリンクだけを抽出してくれるサービスがbacktweetsである。制限等はBacktypeと同じというかうまくゲートウェイだけ作って、検索等はBacktypeに乗っかっている。なのでAPIも基本的にはBacktypeへのproxyとなっている。&lt;/p&gt;

&lt;p&gt;ここで問題なのはbacktypeのAPIにJSONPが含まれていないことである。先日書いたようにJSONではブラウザのXSS対策にひっかかって他サイトのデータを取って来ることが出来ない。そこでproxyサーバを立てて自分のサーバから直接backtweetsのAPIを叩くようにした。サーバに使ったのは最近いじっていて面白いと思っているNode.jsというjavascriptの処理系だ。こいつはイベントループでIOブロックしない並列処理をガリガリかけるのが特徴なようだが今回はただのサーバとして使っている。とはいえ、たかがProxyのためにいくつもプロセスを立ち上げたくはないので、その点スケーラビリティの高いNode.jsは便利である。処理速度もGoogleのV8エンジンがベースになっているので素晴らしく早い。とはいえアプリケーションサーバ内でHTTPアクセスを繰り返しているのでページの読み込みは遅くなってしまう。&lt;/p&gt;

&lt;p&gt;対処法として&lt;/p&gt;

&lt;p&gt;Sinatraのキャッシュを使って初回のみbacktweetsのAPIを叩くようにする
Ajaxで遅延読み込みを行う
の二つを考えたが、backtweets（というかBacktype）のAPIが1日千回という制限があるのでキャッシュでアクセス回数を押さえられる１のアプローチを取った。ページがキャッシュされてないときだけSinatra側でNode.jsのproxyにアクセスしてデータを取ってくる。これなら読み込みの遅さも随分軽減出来てなかなか快適にTwitterによるコメントシステムを実装出来た。&lt;/p&gt;

&lt;p&gt;ただ、これを実装してから気付いたのだがSinatra側で読み込むのであればNode.jsのproxyはそもそも必要ない。とはいえNode.jsの（特にイベントの）勉強になったのと、せっかく作ったのにRubyで作り直すのも勿体ないのでしばらくはこのままで運用しようと思っている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>JSONとJSONPの違い</title>
      <link>https://tanstaafl.0pt.jp/posts/2010/11/17/75eb52a3779e/</link>
      <pubDate>Wed, 17 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/posts/2010/11/17/75eb52a3779e/</guid>
      <description>&lt;p&gt;Twitter APIで取得していたコメントが消えてしまった。Twitter検索で引っかかるのは7日間だけである。これでは少し寂しいのでツイートの取得にTopsyを利用してみた。Topsyはツイッター等の発言をベースにした検索エンジンで、公開されたAPIから特定のサイトについてのツイートを抽出して取得するといったことが出来る。&lt;/p&gt;

&lt;p&gt;それでTopsyのAPIをjQueryの機能で取得してみようとしたのだがjsonを取得しようとするとリクエストは200 OKを返すのにデータが取得出来ない。jQueryが原因かと思って色々調べてみたのだが違うようだ。原因はスクリプトの実行元と異なるドメインのデータをxmlHttpRequestでは取得出来ないかららしい。何故このようにしているかというとクロスサイトスクリプティングを防止するためのようだ。しかしこの制限にも抜け道がある。それがJSONPである。&lt;/p&gt;

&lt;p&gt;JSONPはscriptタグを利用してリモートのデータを読み込む。JSONの実体がjavascriptのコードであることを利用しているのだ。そしてコールバックを実行してデータを再生する。シンプルな仕組みである。&lt;/p&gt;

&lt;p&gt;参考にしたのはここのサイトである（jQueryはJSONPの理解の妨げになるか？）。
僕は今までJSONとJSONPについて違いがよくわかっておらず、単にコールバックを指定するのがJSONPだと思っていた。しかしAjaxの処理にはデータ形式によらずコールバックを使うのだからこれでは違いにならない。scriptタグを利用したデータの読み込みこそがJSONPだったのだ。こういうことはjQueryの解説サイトにはあんまり書いていない。Ajax技術としては常識なんだろうけどjQueryでAjaxを始めた人のためにも是非啓蒙して欲しいと思う。&lt;/p&gt;

&lt;p&gt;まとめ&lt;/p&gt;

&lt;p&gt;JSONを含め通常Ajaxで使うxmlHttpRequestでは外部サイトのデータを取得出来ない(XSS対策）
JSONPはscriptタグで外部サイトを読み込むことで上記を回避している
jQueryではJSONとJSONPを同じように扱えるが両者はまったく由来の異なる技術である。&lt;/p&gt;

&lt;p&gt;JSONはただのデータ形式（javascriptのオブジェクトをtext化したもの）
JSONPはデータを読み込むための技術（javascriptコードの読み込み）&lt;/p&gt;

&lt;p&gt;Ajaxではデータの受け渡しの形式としてどちらも用いられている。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Twitterでコメント</title>
      <link>https://tanstaafl.0pt.jp/posts/2010/11/08/1db91739f81f/</link>
      <pubDate>Mon, 08 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/posts/2010/11/08/1db91739f81f/</guid>
      <description>&lt;p&gt;Disqusを止めて、コメントシステムをTwitterで管理するようにした。理由は出来る限りシンプルにしたかったことと、Twitter APIを試してみたかったためである。&lt;/p&gt;

&lt;p&gt;ただし、現状コメント機能は無いので外部でつぶやかれたURLをトラックバックするだけの機能である。&lt;/p&gt;

&lt;p&gt;追記：とりあえず、Twitter公式のボタンを挿入した。シンプルでよし。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Twitterでコメント2</title>
      <link>https://tanstaafl.0pt.jp/posts/2010/11/08/ec3b981577bc/</link>
      <pubDate>Mon, 08 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/posts/2010/11/08/ec3b981577bc/</guid>
      <description>&lt;p&gt;前回作ったコメントシステムだがコードは単純だ。TwitterのSearch APIをjQuery.ajaxで叩くだけだ。
戻り値はjsonなので処理も簡単に出来る。ハマったのはcallbackを指定しないとjsonが取れないということだ。APIの説明を読んでもOptionalだと書いてあるのだが、どうも必須なようなので取りあえず空で指定してある。取得するコードは以下でjsonを取得したあとはjQueryを使ってHTMLに挿入している。&lt;/p&gt;

&lt;p&gt;var thisurl = encodeURI(encodeURI(decodeURI(window.location.href)));
$.ajax({
  url :&amp;ldquo;&lt;a href=&#34;http://search.twitter.com/search.json&amp;quot;&#34;&gt;http://search.twitter.com/search.json&amp;quot;&lt;/a&gt;,
  dataType : &amp;ldquo;json&amp;rdquo;,
  data : &amp;ldquo;callback=?&amp;amp;q=&amp;ldquo;+thisurl+&amp;rdquo;&amp;amp;show_user=false&amp;rdquo;,
  success : function(json){
  //表示処理
  }
})&lt;/p&gt;

&lt;p&gt;Tweetボタンはここから貼付けた。自動生成で簡単にスクリプトが出来る。
シンプルだがこのブログには十分だろう。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Facebookが流行る理由</title>
      <link>https://tanstaafl.0pt.jp/posts/2010/10/27/107a3d9584f3/</link>
      <pubDate>Wed, 27 Oct 2010 00:00:00 +0000</pubDate>
      
      <guid>https://tanstaafl.0pt.jp/posts/2010/10/27/107a3d9584f3/</guid>
      <description>&lt;p&gt;最近僕の周りでもFacebookが流行り始めている。まだ特定のクラスターだけで流行ってる感じだけれどもそれ以外でもぽつりぽつりと増え始めている。去年のTwitterと同じような動きをしているので期待持てそうだ。&lt;/p&gt;

&lt;p&gt;Facebookが流行する理由はいろんな人が挙げている。しかし下敷きとなっているのはTwitterの流行だと思う。TwitterはメッセージングのためのSNSだ。それまでの携帯メールベースのネットワークとは異なるレイヤを日本社会にもたらした。既存のSNSとしてmixiを挙げる人が多いが Mixiはどちらかというと会員制のBlogに近い。リアルタイムのメッセージングツールでは無かったのだ。&lt;/p&gt;

&lt;p&gt;もっともTwitterが流行ったからといって人々がFacebookに移行するとは限らない。しかし重要なのはFacebookとTwitterは競合しないしむしろ相乗的な効果を持っているということだ。Facebookはアドレスブック、ないしメッセージボード的な使い方が主流でコンテンツ発信には向いていない。Twitterはリアルタイムに情報を発信する。SNSにおいてユーザーの輪が増えても誰も発信しなければ、いずれ人の流れが止まってしまうだろう。Twitterと連携することでFacebookはつぶやきというコンテンツが絶えず発信されている状態になる。これはリアルタイムの更新を特色とするFacebookにとっては良いことだ。&lt;/p&gt;

&lt;p&gt;もちろんFacebook側によいからといって既存のTwitterユーザが移行する理由にはならない。Twitter側のメリットはFacebookがよりクローズドな場を提供してくれることだ。Twitterはオープンなネットワークをもたらすがクローズドな通信機能は貧弱だ。ダイレクトメッセージが頼りだが活用している人は少ない。Twitterでオープンな関係を築いた後Facebook経由で携帯メール等にクローズドな連絡を委譲してそちらでより緊密なネットワークを構築するというのは充分メリットだと思う。そうでなくてもTwitterはソーシャルメディアとしてはあまりにオープンすぎるので単独では限界が来る。実名ベースでクローズドなFacebookが存在意義を確立出来るニッチは充分ある。&lt;/p&gt;

&lt;p&gt;逆に窮地に立つのがmixiだ。mixiの欠点はそれ自体がFacebookに劣るというよりTwitterと食い合ってる点にある。mixiはクローズドだがどちらかというとコンテンツ発信に立っている。連絡ツールとしてはmixiは圧倒的に不便である。そしてコンテンツ発信の手軽さではTwitter が有利なのである。mixiには、アカウントは持っている、他人の更新はチェックするが自分は発信しないというユーザーが結構多い。この層を発信、受信どちらも手軽に行えるTwitterに取られてしまっているのが現状だろう。mixiはメッセージングツールになるか、あるいはメッセージングを媒介するアドレスブックになるかを選択すべきだったのだが中途半端な状態のまま来てしまった。mixiはゲームやニュース等メディア化して生き残ろうとしているが、それはYahooのようなオープンなポータルに変わるということである。SNSとしては死ぬのではないか。&lt;/p&gt;

&lt;p&gt;日本人としてはmixiに頑張って欲しい。けれどもFacebookの方がポジションがはっきりして分かりやすい、使いやすいというのもまた事実である。多分今後の流行としてはTwitterが主流になっていく裏でFacebookとmixiのポジション争いが行われるだろう。今後mixiが生き残っていけるかはこれまで築いたネットワークをどうソーシャルな「場」に転換していくかが重要だと僕は思う。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>